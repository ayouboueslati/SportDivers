plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id 'com.microsoft.appcenter'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

android {
    afterEvaluate {
        if(System.getenv("IS_CI_BUILD") == "true"){
            // if you are creating bundle for release build then task name below will be bundleRelease
            // if apk, then it will be assembleRelease
            // if any flavor then, for staging flavor it will be bundleStagingRelease and assembleStagingRelease respectively
            def bundleTask = project.tasks.findByName('assembleRelease')

            // Create a custom task to run after bundleRelease or assembleRelease
            task copyBuildTask(dependsOn: bundleTask) {
                // Configure your custom task here
                doLast {
                    // Code to run after bundleRelease or asssembleRelease for appcenter
                    println "Copying builds..."

                    // if any flavor then path will change accordingly, for staging it will be -
                    // def apkPath = file('../../build/app/outputs/flutter-apk/app-staging-release.apk')
                    def apkPath = file('../../build/app/outputs/flutter-apk/app-release.apk')
                    if(apkPath.exists()) {
                        def apkDir = file('build/outputs/apk/')
                        apkDir.mkdirs()
                        copy {
                            from apkPath.parent
                            into apkDir
                            include apkPath.name
                        }
                        println "Apk file moved to: ${apkDir}/${apkPath.name}"
                    }

                    // if any flavor then path will change accordingly, for staging it will be -
                    // def bundlePath = file('../../build/app/outputs/bundle/stagingRelease/app-staging-release.aab')
                    def bundlePath = file('../../build/app/outputs/bundle/release/app-release.aab')
                    if(bundlePath.exists()) {
                        def bundleDir = file('build/outputs/bundle/')
                        bundleDir.mkdirs()
                        copy {
                            from bundlePath.parent
                            into bundlePath
                            include bundlePath.name
                        }
                        println "AAB file moved to: ${bundleDir}/${bundlePath.name}"
                    }

                    // if any flavor then path will change accordingly, for staging it will be -
                    //def mappingPath = file('../../build/app/outputs/mapping/stagingRelease/mapping.txt')
                    def mappingPath = file('../../build/app/outputs/mapping/release/mapping.txt')
                    if(mappingPath.exists()) {
                        def mappingDir = file('build/outputs/mapping/')
                        mappingDir.mkdirs()
                        copy {
                            from mappingPath.parent
                            into mappingDir
                            include mappingPath.name
                        }
                        println "Mapping file moved to: ${mappingDir}/${mappingPath.name}"
                    }
                }
            }

            if(bundleTask != null) {
                bundleTask.finalizedBy(copyBuildTask)
            }
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.multidex:multidex:2.0.1'
    def appCenterSdkVersion = '5.0.4'
    implementation "com.microsoft.appcenter:appcenter-analytics:${appCenterSdkVersion}"
    implementation "com.microsoft.appcenter:appcenter-crashes:${appCenterSdkVersion}"
}

flutter {
    source = "../.."
}
